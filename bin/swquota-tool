#!/usr/bin/python -u
# Copyright (c) 2010-2012 OpenStack, LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

""" swquota-tool: get or set quota for Openstack Swift using swquota

    Requires reseller account authentication and account name.

"""

import sys
from os import environ
from optparse import OptionParser
from swiftclient import client, post_account


def getquota(storage_url, auth_token):
    """ Returns used bytes and quota of given account """

    account = client.get_account(storage_url, auth_token)
    used = account[0]['x-account-bytes-used']
    if 'x-account-meta-bytes-limit' in account[0]:
        quota = account[0]['x-account-meta-bytes-limit']
    else:
        quota = -1
    return (used, quota)


def setquota(storage_url, auth_token, quota):
    """ Sets quota of given account """


    headers = {'X-Account-Meta-Bytes-Limit': quota}
    post_account(storage_url, auth_token, headers)


def main():
    """ Main function """
    parser = OptionParser(version='%prog 1.0', )

    parser.add_option('-A', '--auth', dest='auth',
                      default=environ.get('ST_AUTH'),
                      help='URL for obtaining an auth token')
    parser.add_option('-U', '--user', dest='user',
                      default=environ.get('ST_USER'),
                      help='User name for obtaining an auth token')
    parser.add_option('-K', '--key', dest='key',
                      default=environ.get('ST_KEY'),
                      help='Key for obtaining an auth token')
    parser.add_option('-a', '--account', dest='account',
                      help='Account for getting/setting quota')
    parser.add_option('-q', '--quota', dest='quota',
                      help='Quota in bytes to set')

    (options, args) = parser.parse_args()

    if None in (options.auth, options.user, options.key):
        parser.print_help()
        sys.exit(0)

    (storage_url, auth_token) = client.get_auth(options.auth,
                                                options.user,
                                                options.key)

    if options.account:
        account = storage_url.split('/')[4]
        storage_url = storage_url.replace(account, options.account)

    (used, quota) = getquota(storage_url, auth_token)

    print "Current quota: %s bytes (%s bytes used)" % (quota, used)

    if options.quota:
        setquota(storage_url, auth_token, options.quota)
        (used, quota) = getquota(storage_url, auth_token)
        print "New quota: %s bytes" % (quota, )


if __name__ == '__main__':
    main()
